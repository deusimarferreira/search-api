buildscript {
    ext {
        integrationTestComposeMode = project.hasProperty('circleCi') ? 'circleci' : 'localhost'
        integrationTestComposeFile = "${project.projectDir.toString()}/src/integration-test/resources/docker/docker-compose-${integrationTestComposeMode}.yml"
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:+'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:' + SPRING_BOOT_VERSION
        classpath 'com.avast.gradle:docker-compose-gradle-plugin:0.5.0'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'com.gradle:build-scan-plugin:1.11'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.5'
    }
}

apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'com.gradle.build-scan'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'docker-compose'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'io.spring.dependency-management'
apply plugin: "me.champeau.gradle.jmh"

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'

    publishAlways()
}

group = 'com.vivareal.search'

ext {
    artifactName = project.hasProperty('artifactName') ? artifactName : 'vivareal-search-api-v2-SNAPSHOT.jar'
}

eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = false
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = false
    }
}

spotless {
    java {
        googleJavaFormat('1.5')
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'VivaReal Search API v2', 'Implementation-Version': artifactName
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    jcenter()
}

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
    compile.exclude module: 'undertow-websockets-jsr'
    compile.exclude module: 'hibernate-validator'
    newRelic
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:' + SPRING_CLOUD_VERSION
        mavenBom 'org.springframework.boot:spring-boot-dependencies:' + SPRING_BOOT_VERSION
    }
}

dependencies {
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-turbine'

    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    compile 'com.getsentry.raven:raven-logback:8.0.3'
    compile 'biz.paluch.logging:logstash-gelf:1.11.2'

    compile 'io.springfox:springfox-swagger2:' + SWAGGER
    compile 'io.springfox:springfox-swagger-ui:' + SWAGGER

    compile 'org.codehaus.janino:janino:3.0.8'

    compile 'org.jparsec:jparsec:3.0'

    compile 'org.glowroot:glowroot-agent-api:0.10.1'
    compile 'com.newrelic.agent.java:newrelic-api:' + NEW_RELIC_VERSION
    newRelic 'com.newrelic.agent.java:newrelic-agent:' + NEW_RELIC_VERSION

    // elasticsearch/lucene unit tests
    testCompile 'org.elasticsearch.test:framework:' + ELASTICSEARCH_VERSION
    testCompile 'org.elasticsearch:elasticsearch:' + ELASTICSEARCH_VERSION
    testCompile 'org.elasticsearch.client:elasticsearch-rest-high-level-client:' + ELASTICSEARCH_VERSION

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    // Fixtures
    testCompile 'br.com.six2six:fixture-factory:3.1.0'
    testCompile 'com.jayway.restassured:rest-assured:2.9.0'

}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
    distributionType = Wrapper.DistributionType.ALL
}

bootRun {
    systemProperties = System.properties
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"]
}

task newrelicDeps(dependsOn: 'bootJar') {
    doLast {
        copy {
            from configurations.newRelic.fileCollection { it.name == 'newrelic-agent' }.singleFile
            into './build/libs'
            rename { 'newrelic.jar' }
        }
    }

    if (project.hasProperty('newRelicKey')) {
        doLast {
            copy {
                filter(ReplaceTokens, tokens: [newRelicKey: newRelicKey])
                from 'src/main/resources/newrelic.yml'
                into './build/resources/main'
            }
        }
    }
}

task copyJarForDockerCompose(dependsOn: 'newrelicDeps', type: Copy) {
    from bootJar
    into './build/libs/'
    rename { 'search-api.jar' }
}

bootJar {
    baseName = artifactName - '.jar'
    launchScript()
}

bootJar.finalizedBy copyJarForDockerCompose

sonarqube {
    properties {
        property "sonar.projectKey", "br.com.vivareal:search-api-v2"
        property "sonar.projectName", "search-api-v2"
        property "sonar.scm.provider", "git"
        property "sonar.host.url", "http://sonarqube.vivareal.io/"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.login", "9eb3df2e079962a62dd40c39a9430795c856280e"
        property "sonar.sources", sourceSets.main.allSource.srcDirs
        property "sonar.tests", [sourceSets.test.java.srcDirs, 'src/integration-test/java'].flatten()
    }
}

test {
    testLogging {
        events 'skipped', 'failed'
        showStackTraces true
        exceptionFormat 'full'
    }
}

/****************************
 * Healthcheck functions
 ****************************/

def isSearchApiHealthy = {
    return isDependencyHealthy('http://localhost:8482/actuator/health')
}

def isESHealthy = {
    return isDependencyHealthy('http://localhost:9200/_cluster/health')
}


def isDependencyHealthy(String url) {
    try {
        url.toURL().text
        return true
    } catch (e) {
        return false
    }
}

def waitForTestDependencyHealthy(name, seconds, healthcheck) {
    println "Waiting until $name becomes healthy"
    while(!healthcheck() && seconds >= 0) {
        sleep(1 * 1000)
        println "Waiting another " + (seconds--) + " seconds to $name becomes healthy"
    }
}

/****************************
 * Integration tests config
 ****************************/

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations{
    integrationTestCompile.extendsFrom testCompile
    integrationTestCompile.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    doFirst {
        if(!isESHealthy() && !isSearchApiHealthy()) {
            throw new RuntimeException("Searchapi compose is not healthy")
        }
    }

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

test.finalizedBy(integrationTest)

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

/****************************
 * Docker compose config
 ****************************/

if(!project.hasProperty('noDockerCompose')) {

    dockerCompose {
        useComposeFiles = [integrationTestComposeFile]
        stopContainers = true
        removeContainers = false
        removeVolumes = false
        waitForTcpPorts = false

        environment.put 'ELASTICSEARCH_VERSION', ELASTICSEARCH_VERSION
    }

    dockerCompose.isRequiredBy(integrationTest)


    composeUp.doFirst {
        println "Using: $integrationTestComposeFile"
    }

    composeUp.doLast {
        waitForTestDependencyHealthy('es', 180, isESHealthy)
        waitForTestDependencyHealthy('searchApi', 120, isSearchApiHealthy)
    }
}

jmh {
    iterations = 1
    fork = 1
    threads = 4
    batchSize = 1
    timeUnit = 'us'           // Output time unit. Available time units are: [m, s, ms, us, ns].

    verbosity = 'NORMAL'      // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
    benchmarkMode = ['all']   // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
    include = ['.*Benchmark']
}
